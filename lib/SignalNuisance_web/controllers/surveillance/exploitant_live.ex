defmodule SignalNuisanceWeb.Surveillance.ExploitantLive do
    use SignalNuisanceWeb, :live_view
    alias SignalNuisance.Signalement
    alias Phoenix.LiveView.JS
    
    def render(assigns) do
      ~H"""
        <h1><%= gettext "Surveillance temps-réel" %></h1>

        <h2><%= gettext "Carte" %> <a class="btn btn-primary mb-3" onclick="$component.recupererGeolocalisation()"><i class="bi bi-geo-alt"></i></a></h2>
        <section id="section-carte" class="row" phx-update="ignore" phx-hook="GestionnaireCarte">
          <div id="carte" style="height: 400px">
          </div>
        </section>

        <div class="my-3 p-3 bg-body rounded shadow-sm">
          <h1 class="pb-2 mb-0"><%= gettext "Derniers signalements" %></h1>
        </div>

        <%= if Enum.empty?(@signalements) do %>
          <div class="d-flex text-muted pt-3">
            Aucun signalement enregistré
          </div>
        <% end %>
        <%= for signalement <- @signalements do %>
          <.live_component module={SignalNuisance.Component.Signalement} id="signalement-{signalement.id}" client={@client} signalement={signalement} />
        <% end %>

        <script type="text/javascript">
          let $component = Object.create({
            carte: null,
            async recupererGeolocalisation() {
              let coords = await recupererGeolocalisation();
              this.carte.setView([coords.latitude, coords.longitude], 16, { animation: true });     
            },
            ready() {

              var PlanIGN = L.tileLayer('https://wxs.ign.fr/{ignApiKey}/geoportail/wmts?'+
                  '&REQUEST=GetTile&SERVICE=WMTS&VERSION=1.0.0&TILEMATRIXSET=PM'+
                  '&LAYER={ignLayer}&STYLE={style}&FORMAT={format}'+
                  '&TILECOL={x}&TILEROW={y}&TILEMATRIX={z}',
                  {
                    ignApiKey: 'pratique',
                    ignLayer: 'GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2',
                    style: 'normal',
                    format: 'image/png',
                    service: 'WMTS',
              });
              this.marks = [
                <%= for signalement <- @signalements do %>
                  [<%= signalement.lat %>, <%= signalement.long %>],
                <% end %>
              ];
              this.carte = L.map('carte', {center: [48.78254197659407, 2.493269270679186], zoom: 16, layers: [PlanIGN]});

              this.marks.forEach(function (mark) {
                L.circle(mark, {color: 'red', opacity: 0.5, radius: 100, fillColor: '#f03', fillOpacity: 0.5}).addTo(this.carte);
              }.bind(this))
            }
          });

          $(document).ready(function() {
            $component.ready();
            liveSocket.hooks.GestionnaireCarte = {
              mounted() {
                this.handleEvent("nouveau_signalement", function(signalement) {
                  console.log("Nouveau signalement reçu !");
                  let coords = [signalement.lat, signalement.long];
                  L.circle(coords, {color: 'red', opacity: 0.5, radius: 100, fillColor: '#f03', fillOpacity: 0.5}).addTo($component.carte);
                });
              }
            };
          });
        </script>

      """
    end

    def handle_info(msg, %{assigns: %{signalements: signalements, client: client}} = socket) do
      case msg do
        %Phoenix.Socket.Broadcast{
          topic: "global", 
          event: "nouveau_signalement", 
          payload: signalement
        } -> 
          Signalement.ajouter_vu_par(signalement.id, client.id)
          {:noreply, 
            socket 
              |> assign(:signalements, [signalement | signalements])
              |> push_event("nouveau_signalement", signalement)
          }
        _ -> {:noreply, socket}
      end

    end
    

    def handle_event(_event, _params, socket) do
      {:noreply, socket}
    end

    def mount(_params, %{"client" => client} = _session, socket) do
      if connected?(socket) do
        Phoenix.PubSub.subscribe(SignalNuisance.PubSub, "global")
      end
      signalements = Signalement.liste()
      signalements |> Enum.each((&Signalement.ajouter_vu_par(&1.id, client.id)))
      {:ok, socket 
            |> assign(:signalements, signalements)
            |> assign(:client, client)
      }
    end

end
  