defmodule SignalNuisanceWeb.Surveillance.ExploitantLive do
    use SignalNuisanceWeb, :live_view
    alias SignalNuisance.Signalement
    alias Phoenix.LiveView.JS
    
    def mount(_params, %{"client" => client} = _session, socket) do
      if connected?(socket) do
        Phoenix.PubSub.subscribe(SignalNuisance.PubSub, "global")
      end

      signalements_en_cours = Signalement.liste(status: "ouvert")
      signalements_fermés = Signalement.liste(status: "fermé")

      (signalements_en_cours ++ signalements_fermés) |> Enum.each((&Signalement.ajouter_vu_par(&1.id, client.id)))
      
      {:ok, socket 
            |> assign(:signalements_fermés, signalements_fermés)
            |> assign(:signalements_en_cours, signalements_en_cours)
            |> assign(:client, client)
      }
    end

    def handle_info(msg, %{assigns: %{signalements_fermés: signalements_fermés, signalements_en_cours: signalements_en_cours, client: client}} = socket) do
      case msg do
        %Phoenix.Socket.Broadcast {
          topic: "global", 
          event: "nouveau_signalement", 
          payload: signalement
        } -> 
          Signalement.ajouter_vu_par(signalement.id, client.id)
          {:noreply, 
            socket 
              |> assign(:signalements_en_cours, [signalement | signalements_en_cours])
              |> push_event("nouveau_signalement", signalement)
          }
        %Phoenix.Socket.Broadcast {
          topic: "global", 
          event: "signalement_cloturé", 
          payload: signalement_id
        } -> 
            {:noreply,
              socket 
              |> assign(:signalements_en_cours, Enum.filter(signalements_en_cours, fn (s) -> s.id != signalement_id end))
              |> assign(:signalements_fermés, Enum.filter(signalements_en_cours, fn (s) -> s.id == signalement_id end) ++ signalements_fermés)
              |> push_event("signalement_cloturé", signalement_id)
            }
        _ -> {:noreply, socket}
      end
    end

    def handle_event(_event, _params, socket) do
      {:noreply, socket}
    end

    def to_js(signalement) do
      "{
        id: #{signalement.id},
        coords: [#{signalement.lat}, #{signalement.long}]
      }"
    end

    def render(assigns) do
      ~H"""
        <h1><%= gettext "Surveillance temps-réel" %></h1>

        <h2><%= gettext "Carte" %> <a class="btn btn-primary mb-3" onclick="$component.recupererGeolocalisation()"><i class="bi bi-geo-alt"></i></a></h2>
        <section id="section-carte" class="row" phx-update="ignore" phx-hook="GestionnaireCarte">
          <div id="carte" style="height: 400px">
          </div>
        </section>

        <div class="my-3 p-3 bg-body rounded shadow-sm">
          <h1 class="pb-2 mb-0"><%= gettext "Signalements en cours" %></h1>
        </div>

        <%= if Enum.empty?(@signalements_en_cours) do %>
          <div class="d-flex text-muted pt-3">
            Aucun signalement en cours
          </div>
        <% end %>
        
        <%= for signalement <- @signalements_en_cours do %>
          <.live_component 
            module={SignalNuisance.Component.Signalement} 
            id={"signalement_#{signalement.id}"} 
            client={@client} 
            signalement={signalement} 
          />
        <% end %>

        <div class="my-3 p-3 bg-body rounded shadow-sm">
          <h1 class="pb-2 mb-0"><%= gettext "Derniers signalements fermés" %></h1>
        </div>

        <%= if Enum.empty?(@signalements_fermés) do %>
          <div class="d-flex text-muted pt-3">
            Aucun signalement...
          </div>
        <% end %>
        
        <%= for signalement <- @signalements_fermés do %>
          <.live_component 
            module={SignalNuisance.Component.Signalement} 
            id="signalement-{signalement.id}" 
            client={@client} 
            signalement={signalement} 
          />
        <% end %>

        <script type="text/javascript">
          let $component = Object.create({
            carte: null,
            async recupererGeolocalisation() {
              let coords = await recupererGeolocalisation();
              this.carte.setView([coords.latitude, coords.longitude], 16, { animation: true });     
            },
            ready() {

              var PlanIGN = L.tileLayer('https://wxs.ign.fr/{ignApiKey}/geoportail/wmts?'+
                  '&REQUEST=GetTile&SERVICE=WMTS&VERSION=1.0.0&TILEMATRIXSET=PM'+
                  '&LAYER={ignLayer}&STYLE={style}&FORMAT={format}'+
                  '&TILECOL={x}&TILEROW={y}&TILEMATRIX={z}',
                  {
                    ignApiKey: 'pratique',
                    ignLayer: 'GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2',
                    style: 'normal',
                    format: 'image/png',
                    service: 'WMTS',
              });
              
              this.marks = [
                <%= for signalement <- @signalements_en_cours do %>
                  <%= to_js(signalement) %>,
                <% end %>
              ];

              this.carte = L.map('carte', {center: [48.78254197659407, 2.493269270679186], zoom: 16, layers: [PlanIGN]});

              this.marks = this.marks.map(function (mark) {
                let _mark = {...mark, item:  L.circle(mark.coords, {color: 'red', opacity: 0.5, radius: 100, fillColor: '#f03', fillOpacity: 0.5})};
                _mark.item.addTo(this.carte);
                return _mark
              }.bind(this))
            }
          });

          $(document).ready(function() {
            $component.ready();
            liveSocket.hooks.GestionnaireCarte = {
              mounted() {
                this.handleEvent("signalement_cloturé", function(signalement_id) {
                  $component.marks.forEach(function(mark) {
                    if(mark == signalement_id) {
                      $component.carte.removeLayer(mark.item);
                    }
                  })
                });
                this.handleEvent("nouveau_signalement", function(signalement) {
                  let coords = [signalement.lat, signalement.long];
                  let mark = {
                    id: signalement.id,
                    coords: [signalement.lat, signalement.long],
                    item: L.circle(coords, {color: 'red', opacity: 0.5, radius: 100, fillColor: '#f03', fillOpacity: 0.5})
                  };
                  $component.marks.push(mark);
                  mark.item.addTo($component.carte);
                });
              }
            };
          });
        </script>

      """
    end



end
  