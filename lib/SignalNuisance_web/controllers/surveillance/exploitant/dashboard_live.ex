defmodule SignalNuisanceWeb.Surveillance.Exploitant.DashboardLive do
    use SignalNuisanceWeb, :live_view
    alias SignalNuisance.Signalement
    alias Phoenix.LiveView.JS
    
    def mount(%{"slug" => slug} = _params, %{"client" => client} = _session, socket) do
      if connected?(socket) do
        Phoenix.PubSub.subscribe(SignalNuisance.PubSub, "global")
      end

      [entreprise] = SignalNuisance.Entreprise.liste(slug: slug)
      signalements_en_cours = Signalement.liste(cloture: false)
      signalements_fermés = Signalement.liste(cloture: true)

      (signalements_en_cours ++ signalements_fermés) |> Enum.each((&Signalement.ajouter_vu_par(&1.id, client.id)))
      
      {:ok, socket 
            |> assign(:entreprise, entreprise)
            |> assign(:signalements_fermés, signalements_fermés)
            |> assign(:signalements_en_cours, signalements_en_cours)
            |> assign(:client, client |> Map.put(:as, SignalNuisance.Model.global_id(entreprise)))
      }
    end

    def handle_info(msg, %{assigns: %{signalements_fermés: signalements_fermés, signalements_en_cours: signalements_en_cours, client: client}} = socket) do
      case msg do
        %Phoenix.Socket.Broadcast {
          topic: "global", 
          event: "nouveau_signalement", 
          payload: signalement
        } -> 
          Signalement.ajouter_vu_par(signalement.id, client.id)
          {:noreply, 
            socket 
              |> assign(:signalements_en_cours, [signalement | signalements_en_cours])
              |> push_event("nouveau_signalement", signalement)
          }
        %Phoenix.Socket.Broadcast {
          topic: "global", 
          event: "signalement_cloturé", 
          payload: signalement_id
        } -> 
            signalements_en_cours = Signalement.liste(cloture: false)
            signalements_fermés = Signalement.liste(cloture: true)
            {:noreply,
              socket 
              |> assign(:signalements_fermés, signalements_fermés)
              |> assign(:signalements_en_cours, signalements_en_cours)
              |> push_event("signalement_cloturé", %{id: signalement_id})
            }
        _ -> {:noreply, socket}
      end
    end

    def handle_event(_event, _params, socket) do
      {:noreply, socket}
    end

    def to_js(signalement) do
      "{
        id: #{signalement.id},
        coords: [#{signalement.lat}, #{signalement.long}]
      }"
    end

    def render(assigns) do
      ~H"""
        <h1><%= gettext "Tableau de bord de %{name}", name: @entreprise.name %></h1>

        <h2><%= gettext "Carte" %></h2>
        <section id="section-carte" class="row" phx-update="ignore" phx-hook="GestionnaireCarte">
          <div id="carte" style="height: 400px">
          </div>
        </section>

        <div class="my-3 p-3 bg-body rounded shadow-sm">
          <h1 class="pb-2 mb-0"><%= gettext "Signalements en cours" %></h1>
        </div>

        <%= if Enum.empty?(@signalements_en_cours) do %>
          <div class="d-flex text-muted pt-3">
            Aucun signalement en cours
          </div>
        <% end %>
        
        <%= for signalement <- @signalements_en_cours do %>
          <.live_component 
            module={SignalNuisance.Component.Signalement} 
            id={"signalement_#{signalement.id}"} 
            client={@client} 
            signalement={signalement} 
          />
        <% end %>

        <div class="my-3 p-3 bg-body rounded shadow-sm">
          <h1 class="pb-2 mb-0"><%= gettext "Derniers signalements fermés" %></h1>
        </div>

        <%= if Enum.empty?(@signalements_fermés) do %>
          <div class="d-flex text-muted pt-3">
            Aucun signalement...
          </div>
        <% end %>
        
        <%= for signalement <- @signalements_fermés do %>
          <.live_component 
            module={SignalNuisance.Component.Signalement} 
            id={"signalement_#{signalement.id}" }
            client={@client} 
            signalement={signalement} 
          />
        <% end %>

        <script type="text/javascript">
          let $component = Object.create({
            carte: null,
            async recupererGeolocalisation() {
              let coords = await recupererGeolocalisation();
              this.carte.setView([coords.latitude, coords.longitude], 16, { animation: true });     
            },
            ready() {

              var PlanIGN = L.tileLayer('https://wxs.ign.fr/{ignApiKey}/geoportail/wmts?'+
                  '&REQUEST=GetTile&SERVICE=WMTS&VERSION=1.0.0&TILEMATRIXSET=PM'+
                  '&LAYER={ignLayer}&STYLE={style}&FORMAT={format}'+
                  '&TILECOL={x}&TILEROW={y}&TILEMATRIX={z}',
                  {
                    ignApiKey: 'pratique',
                    ignLayer: 'GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2',
                    style: 'normal',
                    format: 'image/png',
                    service: 'WMTS',
              });
              
              
              this.marks = [
                <%= for signalement <- @signalements_en_cours do %>
                  <%= to_js(signalement) %>,
                <% end %>
              ];
              
              let entreprise_coords = [<%= @entreprise.lat %>, <%= @entreprise.long %>];    
              this.carte = L.map('carte', {center: entreprise_coords, zoom: 14, layers: [PlanIGN]});         
              L.marker(entreprise_coords).addTo(this.carte);
              
              this.heat_map = this.marks.map(m => m.coords.concat([0.2]));
              this.heat = L.heatLayer(this.heat_map, {radius: 40, minOpacity: 0.5, maxZoom: 16}).addTo(this.carte);
            }
          });

          $(document).ready(function() {
            $component.ready();
            liveSocket.hooks.GestionnaireCarte = {
              mounted() {
                this.handleEvent("signalement_cloturé", function(signalement) {
                  this.marks = this.marks.filter(sig => sig.id != signalement.id);
                  this.heat_map = this.marks.map(m => m.coords.concat([0.2]));
                  this.heat.setLatLngs(this.heat_map);
                }.bind($component));
                this.handleEvent("nouveau_signalement", function(signalement) {
                  let coords = [signalement.lat, signalement.long];
                  let mark = {
                    id: signalement.id,
                    coords: [signalement.lat, signalement.long],
                  };
                  this.marks.push(mark);
                  this.heat.addLatLng(mark.coords);
                }.bind($component));
              }
            };
          });
        </script>

      """
    end



end
  