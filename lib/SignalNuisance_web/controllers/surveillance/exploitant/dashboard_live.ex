defmodule SignalNuisance.Debouncer do
  use GenServer
  
  def start_link(parent_pid \\ self()) do
    {:ok, pid} = GenServer.start_link(__MODULE__, parent_pid)
    pid
  end

  @impl true
  def init(parent_pid) do
    {:ok, %{parent: parent_pid, scheduled: %{}, values: %{}}}
  end

  @impl true
  def handle_call({:debounce, type, value}, _from, état) do  
    état = if get_in(état, [:values, type]) == nil do
      put_in état, [:values, type], []
    else
      état
    end

    état = update_in état, [:values, type], &([value | &1])

    état = if get_in(état, [:scheduled, type]) == true do
      état
    else
      timeout = :timer.seconds(1)
      :timer.send_after(timeout, self(), {:trigger, type})
      put_in état, [:scheduled, type], true
    end

    {:reply, :ok, état}
  end

  @impl true
  def handle_call({:debounce, type}, _from, état) do  
    état = if get_in(état, [:scheduled, type]) == true do
      état
    else
      timeout = :timer.seconds(1)
      :timer.send_after(timeout, self(), {:trigger, type})
      put_in état, [:scheduled, type], true
    end
    {:reply, :ok, état}
  end

  def handle_info({:trigger, type}, état) do
    values = get_in état, [:values, type]
    état = put_in état, [:scheduled, type], false

    état = if values != nil do
      send état.parent, {:debounce_exec, type, values}
      put_in état, [:values, type], []
    else
      send état.parent, {:debounce_exec, type}
      état
    end
    
    {:noreply, état}
  end

  def debounce(pid, type, value) do
    GenServer.call(pid, {:debounce, type, value})
  end

  def debounce(pid, type) do
    GenServer.call(pid, {:debounce, type})
  end

end

defmodule SignalNuisanceWeb.Surveillance.Exploitant.DashboardLive do
    use SignalNuisanceWeb, :live_view
    alias SignalNuisance.Signalement
    alias SignalNuisance.Entreprise
    alias SignalNuisance.HoraireProduction
    alias SignalNuisance.Stats.SommeSignalementEnCours
    alias Phoenix.LiveView.JS
    
    def mount(%{"slug" => slug} = _params, %{"client" => client} = _session, socket) do
      if connected?(socket) do
        Phoenix.PubSub.subscribe(SignalNuisance.PubSub, "global")
      end

      [entreprise] = Entreprise.liste(ou: [slug: slug])

      {:ok, socket 
        |> assign(:entreprise, entreprise)
        |> assign(:production_en_cours, false)
        |> assign(:client, client |> Map.put(:as, SignalNuisance.Model.global_id(entreprise)))
        |> assign(:debouncer, SignalNuisance.Debouncer.start_link())
        |> mettre_a_jour_liste_signalements
        |> mettre_a_jour_horaire_production
        |> mettre_à_jour_stats
      }
    end

    def debounce(socket, type, value) do
      SignalNuisance.Debouncer.debounce socket.assigns.debouncer, type, value
      socket
    end

    def debounce(socket, type) do
      SignalNuisance.Debouncer.debounce socket.assigns.debouncer, type
      socket
    end

    def mettre_à_jour_stats(socket) do
      somme_signalement_en_cours = SommeSignalementEnCours.liste(trier_par: {:t, :desc}, ou: [f: "minute"], limite: 5)
      if length(somme_signalement_en_cours) > 2 do
        h = Enum.at(somme_signalement_en_cours, 0) 
        t = Enum.at(somme_signalement_en_cours, -1)

        abs =  (h.v - t.v)
        rel = if t.v != 0, do: Float.round((abs / t.v) * 100, 2), else: nil
        
        socket 
        |> assign(:tend_sec_abs, abs)
        |> assign(:tend_sec_rel, rel)
      else 
        socket 
        |> assign(:tend_sec_abs, 0)
        |> assign(:tend_sec_rel, nil)
      end
    end

    def mettre_a_jour_horaire_production(%{assigns: %{entreprise: entreprise}} = socket) do
      case HoraireProduction.en_cours(entreprise) do
        [horaire] -> socket |> assign(:production_en_cours, true) |> assign(:horaire_en_cours, horaire)
        [] -> socket |> assign(:production_en_cours, false) |> assign(:horaire_en_cours, nil)
        _ -> socket
      end
    end

    def mettre_a_jour_liste_signalements(%{assigns: %{client: client}} = socket) do
      signalements_en_cours = Signalement.liste(ou: [cloture: false], trier_par: {:modifie_le, :desc}, limite: 5)
      signalements_fermés   = Signalement.liste(ou: [cloture: true], trier_par: {:modifie_le, :desc}, limite: 5)

      (signalements_en_cours ++ signalements_fermés) |> Enum.each((&Signalement.ajouter_vu_par(&1.id, client.id)))
      
      socket
      |> assign(:compte_signalements_en_cours, Signalement.compte(ou: [cloture: false]))
      |> assign(:compte_signalements_fermés, Signalement.compte(ou: [cloture: true]))
      |> assign(:signalements_fermés, signalements_fermés)
      |> assign(:signalements_en_cours, signalements_en_cours) 
    end

    def handle_info(msg, %{assigns: %{signalements_fermés: signalements_fermés, signalements_en_cours: signalements_en_cours, client: client, entreprise: entreprise}} = socket) do
      entreprise_id = entreprise.id
      case msg do
        {:debounce_exec, :mettre_à_jour_liste_signalements} ->
          {:noreply, socket 
          |> mettre_a_jour_liste_signalements 
        }
        {:debounce_exec, :mettre_à_jour_stats} ->
          {:noreply, socket 
          |> mettre_à_jour_stats 
        }
        {:debounce_exec, :envoyer_signalements_fermés_au_client, signalements_fermés} ->
          {:noreply, socket 
          |> push_event("signalements_cloturés", %{signalements: signalements_fermés})
          }
        {:debounce_exec, :envoyer_nouveaux_signalements_au_client, nouveaux_signalements} ->
          {:noreply, socket 
          |> push_event("nouveaux_signalements", %{signalements: nouveaux_signalements})
          }
        %Phoenix.Socket.Broadcast {
          topic: "global", 
          event: "nouveau", 
          payload: {Signalement, signalement}
        } -> 
          Signalement.ajouter_vu_par(signalement.id, client.id)
          {:noreply,
          socket 
          |> debounce(:mettre_à_jour_liste_signalements)
          |> debounce(:envoyer_nouveaux_signalements_au_client, signalement)
          }   
        %Phoenix.Socket.Broadcast {
          topic: "global", 
          event: "modification", 
          payload: {Signalement, {_id, _modifications}}
        } -> 
            {:noreply,
              socket 
              |> debounce(:mettre_à_jour_liste_signalements)
            }
        %Phoenix.Socket.Broadcast {
          topic: "global", 
          event: "cloturé", 
          payload: {Signalement, signalement_id}
        } -> 
            {:noreply,
              socket 
              |> debounce(:mettre_à_jour_liste_signalements)
              |> debounce(:envoyer_signalements_fermés_au_client, signalement_id)
            }
        %Phoenix.Socket.Broadcast {
          topic: "global", 
          event: "nouveau", 
          payload: {SommeSignalementEnCours, _}
        } -> 
          {:noreply,
          socket 
          |> debounce(:mettre_à_jour_stats)
          }
        %Phoenix.Socket.Broadcast {
          topic: "global", 
          event: "nouveau", 
          payload: {HoraireProduction, _}
          } -> 
              {:noreply,
              socket 
              |> mettre_a_jour_horaire_production
              }
        %Phoenix.Socket.Broadcast {
          topic: "global", 
          event: "modification", 
          payload: {HoraireProduction, _, _}
        } -> 
            {:noreply,
              socket 
              |> mettre_a_jour_horaire_production
            }
        _ -> {:noreply, socket}
      end
    end

    def handle_event(event, _params, socket) do
      case event do
        "basculer_production" ->
          if socket.assigns.production_en_cours do
            HoraireProduction.terminer(socket.assigns.entreprise)
          else
            HoraireProduction.commencer(socket.assigns.entreprise)
          end
          {:noreply, socket}
        _ -> {:noreply, socket}
      end
    end

    def to_js(signalement) do
      "{
        id: #{signalement.id},
        coords: [#{signalement.lat}, #{signalement.long}]
      }"
    end

    def render(assigns) do
      ~H"""
      <div class="row">
      <.live_component 
        module={SignalNuisanceWeb.Surveillance.Exploitant.Menu} 
        id={"exploitant_menu"} 
        entreprise={@entreprise} 
      />
      
      <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
        <h1><%= gettext "Tableau de bord" %></h1>

        <div class="container px-4">
          <div class="row gx-3 gy-3">
            <div class="col-4">
              <%= if @production_en_cours do %>
                <div class="card bg-green rounded shadow-sm">
                  <div class="card-body">
                    <h6 class="card-title text-white">Production en cours</h6>
                    <p class="card-text text-white">Depuis <%= Timex.diff(Timex.now, @horaire_en_cours.commence_le, :duration)  |> Timex.format_duration(:humanized) %></p>
                    <div class="form-check form-switch">
                      <input type="checkbox" class="form-check-input" id="customSwitch1" phx-click="basculer_production" checked>
                    </div>
                  </div>
                </div>
              <% else %>
              <div class="card bg-red rounded shadow-sm">
                <div class="card-body">
                  <h6 class="card-title text-white">Pas de production en cours</h6>
                  <p class="card-text text-white"></p>
                  <div class="form-check form-switch">
                    <input type="checkbox" class="form-check-input" id="customSwitch1" phx-click="basculer_production">
                  </div>
                </div>
              </div>
            <% end %>
            </div>
            <div class="col-4">
              <div class="rounded card bg-body shadow-sm">
                <div class="card-body">
                  <h6 class="h6 card-title">Tendance (sur 5mn) </h6>
                  <p class="card-text display-1"><%= @tend_sec_abs %></p>
                  <p class="card-text">
                    <strong class={if @tend_sec_rel > 0, do: "text-red", else: "text-green"}>
                      <%= if @tend_sec_rel, do: "#{@tend_sec_rel}%", else: "" %>
                    </strong>
                  </p>
                </div>            
              </div>
            </div>
            <div class="col-4"></div>
            <div class="col-12">
              <div class="bg-body rounded shadow-sm card">
                <div class="card-body">
                  <h2 class="card-title"><%= gettext "Carte" %></h2>
                  <div id="section-carte" phx-update="ignore" phx-hook="GestionnaireCarte">
                    <div id="carte"  style="height: 400px">
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-6">
              <div class="bg-body rounded shadow-sm card">
                <div class="card-body">
                  <h2 class="card-title"><%= gettext "Signalements en cours" %> (<%= @compte_signalements_en_cours %>)</h2>
                  <.live_component 
                    module={__MODULE__.Signalements} 
                    id={"signalements_en_cours"} 
                    client={@client} 
                    signalements={@signalements_en_cours} 
                  />
                </div>
              </div>
            </div>
            <div class="col-6">
              <div class="bg-body rounded shadow-sm card">
                <div class="card-body">
                  <h2 class="card-title"><%= gettext "Signalements fermés" %> (<%= @compte_signalements_fermés %>)</h2>
                  <.live_component 
                    module={__MODULE__.Signalements} 
                    id={"signalements_fermés"} 
                    client={@client} 
                    signalements={@signalements_fermés} 
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
        </main>
        </div>
        <script type="text/javascript">
          let $component = Object.create({
            carte: null,
            async recupererGeolocalisation() {
              let coords = await recupererGeolocalisation();
              this.carte.setView([coords.latitude, coords.longitude], 16, { animation: true });     
            },
            ready() {

              var PlanIGN = L.tileLayer('https://wxs.ign.fr/{ignApiKey}/geoportail/wmts?'+
                  '&REQUEST=GetTile&SERVICE=WMTS&VERSION=1.0.0&TILEMATRIXSET=PM'+
                  '&LAYER={ignLayer}&STYLE={style}&FORMAT={format}'+
                  '&TILECOL={x}&TILEROW={y}&TILEMATRIX={z}',
                  {
                    ignApiKey: 'pratique',
                    ignLayer: 'GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2',
                    style: 'normal',
                    format: 'image/png',
                    service: 'WMTS',
              });
              
              
              this.marks = [
                <%= for signalement <- SignalNuisance.Signalement.liste(ou: [cloture: false]) do %>
                  <%= to_js(signalement) %>,
                <% end %>
              ];
              
              let entreprise_coords = [<%= @entreprise.lat %>, <%= @entreprise.long %>];    
              this.carte = L.map('carte', {center: entreprise_coords, zoom: 14, layers: [PlanIGN]});         
              L.marker(entreprise_coords).addTo(this.carte);
              
              this.heat_map = this.marks.map(m => m.coords.concat([0.4]));
              this.heat = L.heatLayer(this.heat_map, {radius: 25, max: 100.0, minOpacity: 0.3}).addTo(this.carte);
            }
          });

          $(document).ready(function() {
            $component.ready();
            liveSocket.hooks.GestionnaireCarte = {
              mounted() {
                this.handleEvent("signalements_cloturés", function(payload) {
                  payload.signalements.forEach(function(sig_id) {
                    this.marks = this.marks.filter(sig => sig.id != sig_id);
                    this.heat_map = this.marks.map(m => m.coords.concat([0.4]));
                    this.heat.setLatLngs(this.heat_map);
                  }.bind(this));
                }.bind($component));
                this.handleEvent("nouveaux_signalements", function(payload) {
                  payload.signalements.forEach(function(signalement) {
                    let coords = [signalement.lat, signalement.long];
                    let mark = {
                      id: signalement.id,
                      coords: [signalement.lat, signalement.long],
                    };
                    this.marks.push(mark);
                    this.heat.addLatLng(mark.coords);
                  }.bind(this));
                }.bind($component));
              }
            };
          });
        </script>
      """
    end
end
  